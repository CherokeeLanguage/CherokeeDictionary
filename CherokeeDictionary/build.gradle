apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'gwt'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.akhikhl.gretty'
apply plugin: 'maven'

group = "com.github.CherokeeLanguage"
version = '20160129'

sourceCompatibility = 1.7
compileJava.options.encoding = 'UTF-8'

farm {
  webapp ':'
}

def RTJAR = '/usr/lib/jvm/java-7-openjdk-amd64/jre/lib/rt.jar';
if (new File(RTJAR).exists()) {
	compileJava.options.bootClasspath=RTJAR
}

buildscript {
	repositories {
        jcenter()
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:+'
        classpath 'org.akhikhl.gretty:gretty:+'
        //classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.6'
    }
}

war {
	archiveName 'CherokeeDictionary.war'
}


gretty {
	port = 8080;
	servletContainer = 'tomcat7'
	managedClassReload = true
	reloadOnClassChange = false
	extraResourceBase 'build/gwt/out'
}

repositories {
    jcenter()
	maven {
		url "https://oss.sonatype.org/content/repositories/google-snapshots/"
	}
	maven {
		url "http://oss.sonatype.org/content/repositories/snapshots"
	}
}

gwt {
	logLevel = 'INFO'

	minHeapSize = "256M";
	maxHeapSize = "1024M";

	gwtVersion='2.8.0-beta1'

	modules 'com.cherokeelessons.dict.DictModule'
	
	compiler {
		disableClassMetadata = false;
		enableClosureCompiler = false;
		strict = true;
		style = "OBF";
	}
	
	superDev {
		noPrecompile = false;
		failOnError = false;
		bindAddress = "0.0.0.0";
	}
	
	eclipse {
		addGwtContainer = false;
	}
}


configurations {
  provided
}

dependencies {
	compile 'javax.ws.rs:javax.ws.rs-api:2.0.1'
	providedCompile 'com.google.gwt:gwt-servlet:'+gwt.gwtVersion
	gwt 'com.google.gwt:gwt-user:'+gwt.gwtVersion
	gwt 'com.google.gwt:gwt-elemental:'+gwt.gwtVersion	
	gwt 'com.googlecode.gwtquery:gwtquery:1.4.4-20160104.180003-16'
	gwt ('com.google.gwt.eventbinder:eventbinder:1.1.0') {
		exclude module: 'gwt-user'
	}
	gwt 'org.fusesource.restygwt:restygwt:2.1.1' //2.1.1
	compile "com.fasterxml.jackson.core:jackson-annotations:2.7.0" //to make Eclipse happy with Gradle + restygwt 2.1.1
	compile('javax.validation:validation-api:1.0.0.GA') {
		artifact {
			name = 'validation-api'
			type = 'jar'
		}
		artifact {
			name = 'validation-api'
			type = 'jar'
			classifier = 'sources'
		}
	}
	gwt 'org.gwtbootstrap3:gwtbootstrap3:0.9.2'
}
 
sourceSets {
  main {
    compileClasspath += configurations.provided
  }
  test {
    compileClasspath += configurations.provided
    runtimeClasspath += configurations.provided
  }
}

task "create-dirs" << {
	sourceSets*.java.srcDirs*.each { it.mkdirs() }
	sourceSets*.resources.srcDirs*.each { it.mkdirs() }
}

eclipseJdt << {
    File f = file('.settings/org.eclipse.core.resources.prefs')
    f.write('eclipse.preferences.version=1\n')
    f.append('encoding/<project>=utf-8')
    f = file('.settings/org.eclipse.core.runtime.prefs')
    f.write('eclipse.preferences.version=1\n')
    f.append('line.separator=\\n\n')
}

eclipse {
	project {
		name = 'CherokeeDictionary'
		comment = 'Cherokee Dictionary GWT based font-end'
		natures 'org.eclipse.buildship.core.gradleprojectnature'
		webAppDirName = 'src/main/webapp'
	}

	jdt {
		sourceCompatibility=1.7
		targetCompatibility=1.7
	}

	wtp {
		facet {
			facets = []
			facet name: 'jst.java', version: '1.7'
			facet name: 'jst.web', version: '3.0'
		}
	}
}

//ENFORCE JAVA VERSION IN ECLIPSE TO MATCH VERSION SET IN GRADLE
project.afterEvaluate {
	// use jre lib matching version used by project, not the workspace default
	if (sourceCompatibility != null) {
		def target = project.sourceCompatibility.toString()
		def containerPrefix = "org.eclipse.jdt.launching.JRE_CONTAINER"
		def containerSuffix
		if (target =~ /1.[4-5]/) {
			containerSuffix = '/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-' + target
		} else if (target =~ /1.[6-8]/) {
			containerSuffix = '/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-' + target
		}
		if (containerSuffix != null) {
			project.eclipse.classpath {
				containers.removeAll { it.startsWith(containerPrefix) }
				containers.add(containerPrefix + containerSuffix)
			}
		}
	}
}
